-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.4).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module ParHw
  ( happyError
  , myLexer
  , pExp
  , pExp1
  ) where

import Prelude

import qualified AbsHw
import LexHw

}

%name pExp Exp
%name pExp1 Exp1
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '('     { PT _ (TS _ 1) }
  ')'     { PT _ (TS _ 2) }
  '.'     { PT _ (TS _ 3) }
  '\\'    { PT _ (TS _ 4) }
  L_Ident { PT _ (TV $$)  }

%%

Ident :: { AbsHw.Ident }
Ident  : L_Ident { AbsHw.Ident $1 }

Exp :: { AbsHw.Exp }
Exp
  : '\\' Ident '.' Exp { AbsHw.EAbs $2 $4 }
  | Exp Exp1 { AbsHw.EApp $1 $2 }
  | Exp1 { $1 }

Exp1 :: { AbsHw.Exp }
Exp1 : Ident { AbsHw.EVar $1 } | '(' Exp ')' { $2 }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

