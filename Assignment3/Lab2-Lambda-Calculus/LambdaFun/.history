:qui
hd a;;
hd [1,2,3];;
head [1,2,3];;
head a;;
hd a;;
:env
a := [1,2,3];;
!a = [1,2,3];;
:env
val a = new [1,2,3];;
:env
:load test/linked-list.lc
:load test/linked-list.lc
insert 2 [1,3];;
:env
cons 0 a;;
hd a;;
hd (a);;
!a;;
tl !a;;
hd !a;;
tl a;;
hd a;;
:env
lengthRec a;;
length !a;;
length !a;
length a;;
:env
:load test/linked-list.lc
:load test/linked-list.lc
:env
a := [1,2,3];;
!a = [1,2,3];;
:env
val a = new [1,2,3];;
:env
a:=c;;
c:=7;;
val c = new [];;
b:=a;;
:env
a:=b;;
b:=a;;
b:=a
:env
val b = 5;;
:env
a := 4 ;;
:env
a := 3;;
:env
val a = new [] ;;
:env
:env
cons 3 b;;
:env
cons 2 a;;
hd nil;;
hd 1;;
hd a;;
:env
cons 3 a;;
cons 0 a;;
cons 2 a;;
cons 1 a;;
nil;;
nil
hd a;;
hd !a;;
hd [a];;
val hd  a;;
hd a;;
length a;;
:env
!a
a
lengthRec a;;
:load test/linked-list.lc
:load test/linked-list.lc
lengthRec a;;
:load test/linked-list.lc
lengthRec a;;
lengthrec a;;
length a ;;
a:= [1,2,3];;
val a = new [];;
lengthRec [1,2,3] ;;
lengthRec [1,2,3];;
length [1,2,3] ;;
insert 1 [] ;
insert 1 [] ;;
:load test/linked-list.lc
:load test/linked-list.lc
:quit
weave [0,1,4] [2,3,5] ;;
:load test/examples.lc
weave [0,1,4] [2,3,5] ;;
:load test/examples.lc
