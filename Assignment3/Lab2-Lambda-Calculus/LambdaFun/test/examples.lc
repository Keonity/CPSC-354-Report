-- the simplest function
val id = \x.x ;;

-- we can use arithmetic on numbers
val plusone = \x. x+1;;

-- rec for recursive definitions, case instead of if-then-else
rec add = \x . \y. case x of { 
    0 -> y, 
    _ -> plusone (add (x-1) y)} ;;

-- pattern matching on lists
rec member = \x.\y. case y of { 
    [] -> false, 
    (a:as) -> case x == a of { true -> true, _ -> member x as } };;

-- isEmpty
rec isEmpty = \x. case x of {
    [] -> true,
    _ -> false } ;;

-- fib
rec fib = \x. case x of {
    0 -> 0,
    1 -> 1,
    _ -> fib (x-1) + fib (x-2)} ;;

-- length
rec length = \x. case x of {
    [] -> 0,
    (a:as) -> 1 + length as } ;;

-- even
rec even = \x. case x of {
    [] -> 1,
    (a:as) -> 1 - even as } ;;

-- reverse0
rec reverse0 = \x. case (tail x) of {
    [] -> (head x),
    _ -> (reverse0 (tail x)):[head x] } ;; 

-- reverse1
-- rec reverse1 = \x. (reverse0 x):[] ;;

-- weave
rec weave = \x. \y. case x of {
    [] -> y,
    (x:xs) -> case y of {
        [] -> x,
        (y:ys) -> case (x<=y) of {
            true -> x:(weave (xs) (y:ys)),
            false -> y:(weave (ys) (x:xs))
        }
    }
} ;;

    -- -> 0 } ;;
    --head x ;;
    --((head x) > 2) -> 1,
    --_ -> 0 } ;;
    --[] -> case y of {
    --    (head y) > 2 -> 1,
    --    _ -> [head y]:(weave (tail y) [])
    --},
    --_ -> case y of {
    --    [] -> [head x]:(weave (tail x) []),
    --    (head y) >= (head x) -> [head x]:(weave (tail x) (y)),
    --    _ -> [head y]:(weave (x) (tail y))
    --    }
    --} ;;