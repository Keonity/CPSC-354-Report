val nil = 
    let val a = new [] in 
    a := "NULL";
    a ;;

val cons = \e. \a. 
    let val b = new [] in
    b := [e,a];
    b ;;

val hd = \a.
    case !a of {
        "NULL" -> "tried to take the head of an empty list",  -- pattern match wtih "NULL", not with nil
        [e,a'] -> e 
    } ;;

val tl = \a.
    case !a of {
        "NULL" -> "tried to take the tail of an empty list",
        [e,a'] -> a'
    } ;;

rec lengthRec = \l. 
    case !l of { 
        "NULL" -> 0 , 
        _ -> 1 + length (tail l) 
    } ;;

val length = \a. 
    let val ptr = new [] in
    let val i = new [] in
    i := 0;
    ptr := a;
    while !(!ptr) != "NULL" do
        case !(!ptr) of {
            [e,a'] -> 
                    i := !i + 1; 
                ptr := a'
        } ;
    !i;;

-- `print (cons 6 (cons 4 (cons 2 nil)))` outputs [6,4,2]
rec print = \list.
    case !list of {
        "NULL" -> [],
        _ -> (hd list):(print (tl list))
    } ;;

-- insert n list
rec insert = \n. \l. 
    let val ptr = new [] in -- creating a new pointer
    ptr := n; -- making it point to the new element
    case !l of { 
        "NULL" -> ptr := (cons !n nil), -- if the list is null, create a new list with the number
        [e, a'] -> ptr := (cons !l !n) -- if the list is of type list, insert the element wherever in the list
    }
    !ptr;;    


