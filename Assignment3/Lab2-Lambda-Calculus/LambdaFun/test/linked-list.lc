val nil = 
    let val a = new [] in 
    a := "NULL";
    a ;;

val cons = \e. \a. 
    let val b = new [] in
    b := [e,a];
    b ;;

val hd = \a.
    case !a of {
        "NULL" -> "tried to take the head of an empty list",  -- pattern match wtih "NULL", not with nil
        [e,a'] -> e 
    } ;;

val tl = \a.
    case !a of {
        "NULL" -> "tried to take the tail of an empty list",
        [e,a'] -> a'
    } ;;

val length = \a. 
    let val ptr = new [] in
    let val i = new [] in
    i := 0;
    ptr := a;
    while !(!ptr) != "NULL" do
        case !(!ptr) of {
            [e,a'] -> 
                    i := !i + 1; 
                ptr := a'
        } ;
    !i;;

rec lengthRec = \l. 
    case !l of { 
        "NULL" -> 0 , 
        _ -> 1 + length (tail l) 
    } ;;

-- `print (cons 6 (cons 4 (cons 2 nil)))` outputs [6,4,2]
rec print = \list.
    case !list of {
        "NULL" -> [],
        _ -> (hd list):(print (tl list))
    } ;;

--val a = new [];;
--a:=(cons 1(cons 2 nil));;
--val b = 3;;

rec insert = \n. \l. 
    case !l of {
        "NULL" -> l:=(cons n nil),
        _ -> case ((head l) <= n) of {
            False -> insert n (tail l),
            True -> case (head (tail l) > n) of {
                False -> l:=(cons n l),
                True -> l:=(cons n l),
                _ -> (insert n (tail l))
            },
            _ -> insert n (tail l)
        }
    }
    ;;

rec insertA = \n. \l.
    let val ptr = new [] in
    let val i = new [] in
    let val num = new [] in
    i := 0;
    num := n;
    ptr := l;
    while !(!ptr) != "NULL" do
        case !(!ptr) of {
            [e,a'] -> ptr:=a',
            [a'] ->
                    case (!a' < n) of {
                        True -> a':=(cons !a' (cons n l)),
                        False -> insertA n (tail l)
                    }
                ptr:=!a'
        }
    l;;

val insertB = \n. \list.
    let val ptr = new [] in
    let val num = new [] in
    num := n;
    ptr := list;
    case !list of {
        "NULL" -> (cons n list),
        _ -> while !(!ptr) != "NULL" do
            case !(!ptr) of {
                [e, a'] -> ptr:=nil,
                _ -> ptr:=nil
            }
    }
    ;;

print (insertB 5 (insertB 4 (insertB 3 nil)));;

rec sort = \l. 
    case !l of {
        "NULL" -> [],
        _ -> case (head (tail l) < (head l)) of {
            --"NULL" -> [],
            True -> (cons (head !(tl l)) l),
            False -> l,
            _ -> (cons 3 nil)
        }
    };;

--print(sort (cons 5 (cons 4 (cons 3 (cons 2 nil)))));;
